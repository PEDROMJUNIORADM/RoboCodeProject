package optimus.v1;

import java.awt.Color;

import robocode.AdvancedRobot;
import robocode.HitByBulletEvent;
import robocode.HitWallEvent;
import robocode.RobotStatus;
import robocode.ScannedRobotEvent;
import robocode.StatusEvent;
import util.Movement;
import util.Shoot;
import util.SmartAgent;

/**
 * This is a version of Optimus Prime with Technical shot.
 * 
 * @version 1.0
 * @author Lucas
 *
 */
public class OptimusPrimeV1 extends AdvancedRobot {
	
	private boolean updatePosition = false;
	private RobotStatus robotStatus;
	private int timeToUpdatePosition = 0;
	private double enemyLife = 0;
	private SmartAgent smartAgent = new SmartAgent();
	
	/**
	 * Run Forrest, run!
	 */
	public void run() {
		setColors(Color.red,Color.blue,Color.green); // body,gun,radar

		while (true) {
			timeToUpdatePosition++;
			if (timeToUpdatePosition >= 5) {
				timeToUpdatePosition = 0;
				updatePosition = true;
			}
			// Replace the next 4 lines with any behavior you would like
			movimento();
		}
	}
	
	/**
	 * onScannedRobot: What to do when you see another robot
	 */
	public void onStatus(StatusEvent e) {
		this.robotStatus = e.getStatus();
	}

	/**
	 * onScannedRobot: What to do when you see another robot
	 */
	public void onScannedRobot(ScannedRobotEvent e) {
		shoot(e);
		
		if (updatePosition) {
			double angleToEnemy = e.getBearing();

			// Calculate the angle to the scanned robot
			double angle = Math.toRadians((robotStatus.getHeading() + angleToEnemy % 360));

			// Calculate the coordinates of the robot
			double posX = (robotStatus.getX() + Math.sin(angle)* e.getDistance());
			double posY = (robotStatus.getY() + Math.cos(angle)* e.getDistance());
			smartAgent.updatePosEnimy(posX, posY);
			
			updatePosition = false;
		}
	}

	/**
	 * onHitByBullet: What to do when you're hit by a bullet
	 */
	public void onHitByBullet(HitByBulletEvent e) {
		back(10);
	}
	
	/**
	 * onHitWall: What to do when you hit a wall
	 */
	public void onHitWall(HitWallEvent e) {
		back(20);
	}
	
	/**
	 * Take a shoot
	 * 
	 * @param event
	 */
	private void shoot(ScannedRobotEvent event){
		enemyLife = event.getEnergy();
		turnGunRight(smartAgent.target(event.getBearing(), event.getHeading(), getGunHeading()));
		Shoot shoot = smartAgent.niceShoot(event.getDistance(), event.getEnergy());
		for (int i = 0; i < shoot.getSize(); i++) {
			fire(shoot.getPower());
		}
	}
	
	public void movement() { // italo

		System.out.println("Pode movimentar: " + agenteInteligente.podeMovimentar);
		if (smartAgent.isPodeMovimentar()) {
			MovimentoRobo movimento = agenteInteligente.movimentoConstante();
			
			turnRight(movimento.direita);
			turnLeft(movimento.esquerda);
			back(movimento.tras);
			ahead(movimento.frente);
		}

		turnGunLeft(360);

	}
	
	public MovimentoRobo movimentoConstante() {
		MovimentoRobo movimentoConstante = new MovimentoRobo();
		int fatorX = 1;
		int fatorY = 1;

		if (enemyX > 500) {
			fatorX = -1;
		}
		if (enemyY > 300) {
			fatorY = -1;
		}

		if (velocidadeMovimentoInimigoX < 5 && velocidadeMovimentoInimigoX >= 0) {
			movimentoConstante.direita = 0;
		} else if (velocidadeMovimentoInimigoX > 10) {
			movimentoConstante.direita = fatorX * 30;
		} else if (velocidadeMovimentoInimigoX > 30) {
			movimentoConstante.direita = fatorX * 50;
		}else{
			movimentoConstante.frente = fatorX * 70;
		}

		if (velocidadeMovimentoInimigoY < 5 && velocidadeMovimentoInimigoY >= 0) {
			movimentoConstante.frente = 0;
		} else if (velocidadeMovimentoInimigoY > 10) {
			movimentoConstante.frente = fatorY * 30;
		} else if (velocidadeMovimentoInimigoY > 30) {
			movimentoConstante.frente = fatorY * 50;
		}else{
			movimentoConstante.frente = fatorY * 70;
		}
		
		System.out.println("Velocidade: " + velocidadeMovimentoInimigoX);
		return movimentoConstante;
	}

	
}
