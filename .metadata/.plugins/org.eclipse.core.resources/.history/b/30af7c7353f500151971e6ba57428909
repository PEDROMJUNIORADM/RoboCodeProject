package util;

import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

/**
 * This agent it will add some intelligent in Optimus Prime.
 * 
 * @version 1.0
 * @author Lucas
 *
 */
public class SmartAgent {
	
	private double enemyMovimentVelocityX;
	private double enemyMovimentVelocityY;
	private double enemyX;
	private double enemyY;
	private boolean podeMovimentar;
	
	public static List<PositionEscape> listaPosicoesFuga = new ArrayList<PosicaoFuga>();
	public static UltimaPosicao ultimaPosicao;
	
	public SmartAgent(){
		enemyMovimentVelocityX = 0;
		enemyMovimentVelocityY = 0;
		podeMovimentar = true;
	}
	
	/**
	 * Prepares a nice shot based on distance of the target, bullet's power and enemy's velocity.
	 * 
	 * @param distance
	 * @param power
	 * @return shoot
	 */
	public Shoot niceShoot(double distance, double power){
		
		if (power < 20) {
			return new Shoot(1, 1);
		}

		if (distance < 180) {
			return new Shoot(3, 3);
		}else if (distance < 250) {
			return new Shoot(2, 3);
		} else if (distance < 300) {
			return new Shoot(1, 2);
		} else if (distance < 550) {
			if (enemyMovimentVelocityX < 5) {
				return new Shoot(2, 3);
			}
			return new Shoot(2, 1);
		} else if (distance < 700) {
			if (enemyMovimentVelocityX < 5) {
				return new Shoot(2, 3);
			}
			return new Shoot(1, 1);
		} else if (distance < 900) {
			if (enemyMovimentVelocityX < 5) {
				return new Shoot(2, 3);
			}
			return new Shoot(1, 1);
		}
		
		return new Shoot(1, 1);
	}
	
	/**
	 * Update the enimy's position
	 * 
	 * @param posX
	 * @param posY
	 */
	public void updatePosEnimy(double posX, double posY) {
		
		enemyMovimentVelocityX = enemyX - posX;
		enemyMovimentVelocityY = enemyY - posY;

		enemyX = posX;
		enemyY = posY;

	}
	
	
	/**
	 * Get a target 
	 * 
	 * @param Adv
	 * @param dirBody
	 * @param dirGun
	 * @return
	 */
	public double target(double Adv, double dirBody, double dirGun) {
		double shotAngle = dirBody + Adv - dirGun;
		if (!(shotAngle > -180 && shotAngle <= 180)) {
			while (shotAngle <= -180) {
				shotAngle += 360;
			}
			while (shotAngle > 180) {
				shotAngle -= 360;
			}
		}
		return shotAngle;
	}
	
	
	public Movement continuousMovement() {
		Movement continuousMovement = new Movement();
		int fatorX = 1;
		int fatorY = 1;

		if (enemyX > 500) {
			fatorX = -1;
		}
		if (enemyY > 300) {
			fatorY = -1;
		}

		if (enemyMovimentVelocityX < 5 && enemyMovimentVelocityX >= 0) {
			continuousMovement.right = 0;
		} else if (enemyMovimentVelocityX > 10) {
			continuousMovement.right = fatorX * 30;
		} else if (enemyMovimentVelocityX > 30) {
			continuousMovement.right = fatorX * 50;
		}else{
			continuousMovement.front = fatorX * 70;
		}

		if (enemyMovimentVelocityY < 5 && enemyMovimentVelocityY >= 0) {
			continuousMovement.front = 0;
		} else if (enemyMovimentVelocityY > 10) {
			continuousMovement.front = fatorY * 30;
		} else if (enemyMovimentVelocityY > 30) {
			continuousMovement.front = fatorY * 50;
		}else{
			continuousMovement.front = fatorY * 70;
		}
		
		return continuousMovement;
	}
	
	public Movement foiAtingido(double anguloBala) throws Exception {

		int anguloAtingido = 0;

		if (anguloBala >= 90 && anguloBala < 180) {
			anguloAtingido = 0;
		} else if (anguloBala >= 0 && anguloBala < 90) {
			anguloAtingido = 1;
		} else if (anguloBala < 0 && anguloBala >= -90) {
			anguloAtingido = 2;
		} else if (anguloBala < -90 && anguloBala >= -180) {
			anguloAtingido = 3;
		}
		
		if (listaPosicoesFuga.isEmpty()) {
			try {
				listaPosicoesFuga = ControladorArquivo.lerArquivo();
			} catch (FileNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
		if (listaPosicoesFuga.isEmpty()) {
			
			for (int anguloTiro = 0; anguloTiro < 4; anguloTiro++) {
				for(int ladoFuga = 0; ladoFuga < 4; ladoFuga++){
					for (int h = 0; h < 19; h++) {
						int anguloMovimento = h * ANGULO_MOVIMENTACAO;
						PosicaoFuga posicaoFuga = new PosicaoFuga();
						
						posicaoFuga.setAnguloFuga(anguloMovimento);
						posicaoFuga.setTempoResistencia(new Double(0));
						posicaoFuga.setPosicaoTiro(anguloTiro);
						posicaoFuga.setPosicaoFuga(ladoFuga);
						listaPosicoesFuga.add(posicaoFuga);
						
					}
				}
			}
			ControladorArquivo.gravarArquivo(listaPosicoesFuga);
		}
		
		if (ultimaPosicao != null) {
			ultimaPosicao.setTempoProximoTiro(Calendar.getInstance().getTimeInMillis());
			
			for (PosicaoFuga posicaoFuga : listaPosicoesFuga) {
				if (posicaoFuga.getAnguloFuga() == ultimaPosicao.getAnguloFuga()
						&& posicaoFuga.getPosicaoFuga() == ultimaPosicao.getPosicaoFuga()
						&& posicaoFuga.getPosicaoTiro() == ultimaPosicao.getPosicaoTiro()) {
					Double tempoResistencia = ((((double) (ultimaPosicao.getTempoProximoTiro() - ultimaPosicao.getTempoTiro()) / 1000)) + posicaoFuga.getTempoResistencia()) / 2;
					
					posicaoFuga.setTempoResistencia(tempoResistencia);
					break;
					
				}
			}
		}
	
		return escolheMelhorAngulo(anguloAtingido);

	}
	
	public double getEnemyMovimentVelocityX() {
		return enemyMovimentVelocityX;
	}

	public void setEnemyMovimentVelocityX(double enemyMovimentVelocityX) {
		this.enemyMovimentVelocityX = enemyMovimentVelocityX;
	}

	public double getEnemyMovimentVelocityY() {
		return enemyMovimentVelocityY;
	}

	public void setEnemyMovimentVelocityY(double enemyMovimentVelocityY) {
		this.enemyMovimentVelocityY = enemyMovimentVelocityY;
	}

	public double getEnemyX() {
		return enemyX;
	}

	public void setEnemyX(double enemyX) {
		this.enemyX = enemyX;
	}

	public double getEnemyY() {
		return enemyY;
	}

	public void setEnemyY(double enemyY) {
		this.enemyY = enemyY;
	}

	public boolean isPodeMovimentar() {
		return podeMovimentar;
	}

	public void setPodeMovimentar(boolean podeMovimentar) {
		this.podeMovimentar = podeMovimentar;
	}
	
}
