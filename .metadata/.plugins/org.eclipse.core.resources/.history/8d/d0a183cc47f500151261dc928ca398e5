package optimus.v1;

/**
 * This agent it will add some intelligent in Optimus Prime.
 * 
 * @version 1.0
 * @author Lucas
 *
 */
public class SmartAgent {
	
	private double enemyMovimentVelocityX;
	
	public SmartAgent(){
		enemyMovimentVelocityX = 0;
	}
	
	/**
	 * Prepares a nice shot based on distance of the target, bullet's power and enemy's velocity.
	 * 
	 * @param distance
	 * @param power
	 * @return shoot
	 */
	public Shoot niceShoot(double distance, double power){
		
		if (power < 20) {
			return new Shoot(1, 1);
		}

		if (distance < 180) {
			return new Shoot(3, 3);
		}else if (distance < 250) {
			return new Shoot(2, 3);
		} else if (distance < 300) {
			return new Shoot(1, 2);
		} else if (distance < 550) {
			if (enemyMovimentVelocityX < 5) {
				return new Shoot(2, 3);
			}
			return new Shoot(2, 1);
		} else if (distance < 700) {
			if (enemyMovimentVelocityX < 5) {
				return new Shoot(2, 3);
			}
			return new Shoot(1, 1);
		} else if (distance < 900) {
			if (enemyMovimentVelocityX < 5) {
				return new Shoot(2, 3);
			}
			return new Shoot(1, 1);
		}
		
		return new Shoot(1, 1);
	}
	
	public double mira(double Adv, double dirTanque, double dirMetralhadora) {
		double anguloTiro = dirTanque + Adv - dirMetralhadora;
		// o ângulo da direcção do nosso robô em relação ao norte, menos o
		// ângulo do nosso radar (é o mesmo do canhão) em relação a direcção
		// para onde estamos virados,
		// mais o ângulo do robô que acabámos de detectar, em relação à direcção
		// para onde o nosso robô está virado.
		
		if (!(anguloTiro > -180 && anguloTiro <= 180)) {
			while (anguloTiro <= -180) {
				anguloTiro += 360;
			}
			while (anguloTiro > 180) {
				anguloTiro -= 360;
			}
		}
		// System.out.println("Posicao da metranca nova: " + getGunHeading());
		// System.out.println("ADV: " + Adv);
		// System.out.println("Hradig: " + getHeading());
		return anguloTiro;
	}
}
