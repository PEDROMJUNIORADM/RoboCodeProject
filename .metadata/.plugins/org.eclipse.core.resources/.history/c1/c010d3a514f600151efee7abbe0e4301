package megaman;

import java.io.IOException;
import java.util.Calendar;

import robocode.*;

/**
 * This is a version of Optimus Prime with Technical shot.
 * 
 * @version 1.0
 * @author Lucas
 *
 */
public class Optimus extends AdvancedRobot {

	boolean podeAtualizarPos = false;
	private double enemyLife = 0;
	int tempoParaAtualizarPosicao = 0;
	private RobotStatus robotStatus;

	SmartAgent agenteInteligente = new SmartAgent();

	/**
	 * Run Forrest, run!
	 */
	public void run() {
		// Initialization of the robot should be put here

		// After trying out your robot, try uncommenting the import at the top,
		// and the next line:

		// setColors(Color.red,Color.blue,Color.green); // body,gun,radar

		// Robot main loop
		while (true) {
			tempoParaAtualizarPosicao++;
			if (tempoParaAtualizarPosicao >= 5) {
				tempoParaAtualizarPosicao = 0;
				podeAtualizarPos = true;
			}
			// Replace the next 4 lines with any behavior you would like
			movimento();

		}
	}

	/**
	 * onScannedRobot: What to do when you see another robot
	 */

	public void onStatus(StatusEvent e) {
		this.robotStatus = e.getStatus();
	}

	public void onScannedRobot(ScannedRobotEvent e) {
		// Replace the next line with any behavior you would like
		atirar(e);

		if (podeAtualizarPos) {
			double angleToEnemy = e.getBearing();

			// Calculate the angle to the scanned robot
			double angle = Math
					.toRadians((robotStatus.getHeading() + angleToEnemy % 360));

			// Calculate the coordinates of the robot
			double posX = (robotStatus.getX() + Math.sin(angle)
					* e.getDistance());
			double posY = (robotStatus.getY() + Math.cos(angle)
					* e.getDistance());
			agenteInteligente.updatePosInimigo(posX, posY);
			podeAtualizarPos = false;
		}
	}

	/**
	 * onHitByBullet: What to do when you're hit by a bullet
	 */
	public void onHitByBullet(HitByBulletEvent e) {
		
		MovementRobot movimento;
		try {
			agenteInteligente.podeMovimentar = false;
			movimento = agenteInteligente.foiAtingido(e.getBearing());
			turnRight(movimento.direita);
			turnLeft(movimento.esquerda);
			back(movimento.tras);
			ahead(movimento.frente);
			agenteInteligente.podeMovimentar = true;
		} catch (Exception e1) {
			// TODO Auto-generated catch block
			agenteInteligente.podeMovimentar = true;
			e1.printStackTrace();
		}

	}

	/**
	 * onHitWall: What to do when you hit a wall
	 */
	public void onHitWall(HitWallEvent e) {
		// Replace the next line with any behavior you would like
		bateuParede(e);
	}

	public void movimento() { // italo

		System.out.println("Pode movimentar: " + agenteInteligente.podeMovimentar);
		if (agenteInteligente.podeMovimentar) {
			MovementRobot movimento = agenteInteligente.movimentoConstante();
			
			turnRight(movimento.direita);
			turnLeft(movimento.esquerda);
			back(movimento.tras);
			ahead(movimento.frente);
		}

		turnGunLeft(360);

	}

	public void atirar(ScannedRobotEvent e) { 
		enemyLife = e.getEnergy();
		turnGunRight(agenteInteligente.mira(e.getBearing(), getHeading(), getGunHeading()));
		Shot tatica = agenteInteligente.tiroPerfeito(e.getDistance(),
				getEnergy());
		for (int i = 0; i < tatica.quantidade; i++) {
			fire(tatica.potencia);
		}

	}

	public void bateuParede(HitWallEvent e) { 
		// back(500);
		// turnRight(90);
		// ahead(100);
	}
	
	
	public void onRoundEnded(RoundEndedEvent event){
	
		if (SmartAgent.ultimaPosicao != null) {
			SmartAgent.ultimaPosicao.setTempoProximoTiro(Calendar.getInstance().getTimeInMillis());
			
			for (PositionEscape posicaoFuga : SmartAgent.listaPosicoesFuga) {
				if (posicaoFuga.getAnguloFuga() == SmartAgent.ultimaPosicao.getAnguloFuga()
						&& posicaoFuga.getPosicaoFuga() == SmartAgent.ultimaPosicao.getPosicaoFuga()
						&& posicaoFuga.getPosicaoTiro() == SmartAgent.ultimaPosicao.getPosicaoTiro()) {
					Double tempoResistencia = ((((double) (SmartAgent.ultimaPosicao.getTempoProximoTiro() - SmartAgent.ultimaPosicao.getTempoTiro()) / 1000)) + posicaoFuga.getTempoResistencia()) / 2;
					
					posicaoFuga.setTempoResistencia(tempoResistencia);
					break;
					
				}
			}
		}
		
		try {
			FileController.gravarArquivo(SmartAgent.listaPosicoesFuga);
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
	}   

	

}
