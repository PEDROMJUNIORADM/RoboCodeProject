package util;

import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.Random;

/**
 * This agent it will add some intelligent in Optimus Prime.
 * 
 * @version 1.0
 * @author Lucas
 *
 */
public class SmartAgent {
	
	private double enemyMovimentVelocityX;
	private double enemyMovimentVelocityY;
	private double enemyX;
	private double enemyY;
	private boolean podeMovimentar;
	
	private final int ANGULE_MOVIMENTATION;
	public static List<PositionEscape> positionEscapeList;
	public static LastPosition lastPosition;
	
	public SmartAgent(){
		enemyMovimentVelocityX = 0;
		enemyMovimentVelocityY = 0;
		podeMovimentar = true;
		ANGULE_MOVIMENTATION = 10;
		positionEscapeList = new ArrayList<PositionEscape>();
	}
	
	/**
	 * Prepares a nice shot based on distance of the target, bullet's power and enemy's velocity.
	 * 
	 * @param distance
	 * @param power
	 * @return shoot
	 */
	public Shoot niceShoot(double distance, double power){
		
		if (power < 20) {
			return new Shoot(1, 1);
		}

		if (distance < 180) {
			return new Shoot(3, 3);
		}else if (distance < 250) {
			return new Shoot(2, 3);
		} else if (distance < 300) {
			return new Shoot(1, 2);
		} else if (distance < 550) {
			if (enemyMovimentVelocityX < 5) {
				return new Shoot(2, 3);
			}
			return new Shoot(2, 1);
		} else if (distance < 700) {
			if (enemyMovimentVelocityX < 5) {
				return new Shoot(2, 3);
			}
			return new Shoot(1, 1);
		} else if (distance < 900) {
			if (enemyMovimentVelocityX < 5) {
				return new Shoot(2, 3);
			}
			return new Shoot(1, 1);
		}
		
		return new Shoot(1, 1);
	}
	
	/**
	 * Update the enimy's position
	 * 
	 * @param posX
	 * @param posY
	 */
	public void updatePosEnimy(double posX, double posY) {
		
		enemyMovimentVelocityX = enemyX - posX;
		enemyMovimentVelocityY = enemyY - posY;

		enemyX = posX;
		enemyY = posY;

	}
	
	
	/**
	 * Get a target 
	 * 
	 * @param Adv
	 * @param dirBody
	 * @param dirGun
	 * @return
	 */
	public double target(double Adv, double dirBody, double dirGun) {
		double shotAngle = dirBody + Adv - dirGun;
		if (!(shotAngle > -180 && shotAngle <= 180)) {
			while (shotAngle <= -180) {
				shotAngle += 360;
			}
			while (shotAngle > 180) {
				shotAngle -= 360;
			}
		}
		return shotAngle;
	}
	
	
	public Movement continuousMovement() {
		Movement continuousMovement = new Movement();
		int fatorX = 1;
		int fatorY = 1;

		if (enemyX > 500) {
			fatorX = -1;
		}
		if (enemyY > 300) {
			fatorY = -1;
		}

		if (enemyMovimentVelocityX < 5 && enemyMovimentVelocityX >= 0) {
			continuousMovement.right = 0;
		} else if (enemyMovimentVelocityX > 10) {
			continuousMovement.right = fatorX * 30;
		} else if (enemyMovimentVelocityX > 30) {
			continuousMovement.right = fatorX * 50;
		}else{
			continuousMovement.front = fatorX * 70;
		}

		if (enemyMovimentVelocityY < 5 && enemyMovimentVelocityY >= 0) {
			continuousMovement.front = 0;
		} else if (enemyMovimentVelocityY > 10) {
			continuousMovement.front = fatorY * 30;
		} else if (enemyMovimentVelocityY > 30) {
			continuousMovement.front = fatorY * 50;
		}else{
			continuousMovement.front = fatorY * 70;
		}
		
		return continuousMovement;
	}
	
	public Movement foiAtingido(double anguloBala) throws Exception {

		int anguloAtingido = 0;

		if (anguloBala >= 90 && anguloBala < 180) {
			anguloAtingido = 0;
		} else if (anguloBala >= 0 && anguloBala < 90) {
			anguloAtingido = 1;
		} else if (anguloBala < 0 && anguloBala >= -90) {
			anguloAtingido = 2;
		} else if (anguloBala < -90 && anguloBala >= -180) {
			anguloAtingido = 3;
		}
		
		if (positionEscapeList.isEmpty()) {
			try {
				positionEscapeList = FileController.readFile();
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			}
		}
		
		if (positionEscapeList.isEmpty()) {
			
			for (int anguleShot = 0; anguleShot < 4; anguleShot++) {
				for(int sideEscape = 0; sideEscape < 4; sideEscape++){
					for (int h = 0; h < 19; h++) {
						int anguleMovement = h * ANGULE_MOVIMENTATION;
						PositionEscape positionEscape = new PositionEscape();
						
						positionEscape.setAnguleEscape(anguleMovement);
						positionEscape.setTimeOfResistance(new Double(0));
						positionEscape.setPositionShot(anguleShot);
						positionEscape.setPositionEscape(sideEscape);
						positionEscapeList.add(positionEscape);
						
					}
				}
			}
			FileController.record(positionEscapeList);
		}
		
		if (lastPosition != null) {
			lastPosition.setTimeToNextShot(Calendar.getInstance().getTimeInMillis());
			
			for (PositionEscape posicaoFuga : positionEscapeList) {
				if (posicaoFuga.getAnguleEscape() == lastPosition.getAnguleEscape()
						&& posicaoFuga.getPositionEscape() == lastPosition.getPositionEscape()
						&& posicaoFuga.getPositionShot() == lastPosition.getPositionShot()) {
					Double timeOfResistance = ((((double) (lastPosition.getTimeToNextShot() - lastPosition.getShotTime()) / 1000)) + posicaoFuga.getTimeOfResistance()) / 2;
					
					posicaoFuga.setTimeOfResistance(timeOfResistance);
					break;
					
				}
			}
		}
	
		return escolheMelhorAngulo(anguloAtingido);
	}
	
	public Movement escolheMelhorAngulo(int posicaoTiro) {

		PositionEscape bestPositionEscape = new PositionEscape();
		boolean haPosicoesNaoTestadas = false;
		
		if (!positionEscapeList.isEmpty()) {
			for (PositionEscape positionEscape : positionEscapeList) {
				if (positionEscape.getPositionShot() == posicaoTiro) {
					if (positionEscape.getTimeOfResistance().doubleValue() == 0) {
						bestPositionEscape = positionEscape.clone();	
						haPosicoesNaoTestadas = true;	
						lastPosition = new LastPosition(positionEscape);
						lastPosition.setShotTime(Calendar.getInstance().getTimeInMillis());
						break;
					}
				}
			}
		}
		
		if (!haPosicoesNaoTestadas) {
			bestPositionEscape = getMaiorResistencia(posicaoTiro);
			lastPosition = new LastPosition(melhorPosicaoFuga);
			lastPosition.setShotTime(Calendar.getInstance().getTimeInMillis());
		}
		

		switch (melhorPosicaoFuga.getPosicaoFuga()) {
		case 0:
			return new Movement(100, 0, 0, melhorPosicaoFuga.getAnguloFuga());
		case 1:
			return new Movement(100, 0, melhorPosicaoFuga.getAnguloFuga(), 0);
		case 2:
			return new Movement(0, 100, 0, melhorPosicaoFuga.getAnguloFuga());
		case 3:
			return new Movement(0, 100, melhorPosicaoFuga.getAnguloFuga(), 0);
		default:
			return new Movement(100, 0, 0, 0);
		}
	}
	
	public PositionEscape getMaiorResistencia(int posicaoTiro){
		Random random = new Random();
		PosicaoFuga melhorPosicao = null;
		for (PosicaoFuga posicaoFuga : listaPosicoesFuga) {
			if (posicaoFuga.getPosicaoTiro() == posicaoTiro) {
				if (melhorPosicao == null) {
					melhorPosicao = posicaoFuga.clone();
				}
				if (posicaoFuga.getTempoResistencia().doubleValue() > melhorPosicao.getTempoResistencia().doubleValue()) {
					melhorPosicao = posicaoFuga.clone();
					
				}else if (posicaoFuga.getTempoResistencia().doubleValue() ==  melhorPosicao.getTempoResistencia().doubleValue()) {					
					int valor = random.nextInt(2);
					if (valor == 0) {
						melhorPosicao = posicaoFuga.clone();
					}
				}
			}
		}
		
		return melhorPosicao;
	}
	
	public double getEnemyMovimentVelocityX() {
		return enemyMovimentVelocityX;
	}

	public void setEnemyMovimentVelocityX(double enemyMovimentVelocityX) {
		this.enemyMovimentVelocityX = enemyMovimentVelocityX;
	}

	public double getEnemyMovimentVelocityY() {
		return enemyMovimentVelocityY;
	}

	public void setEnemyMovimentVelocityY(double enemyMovimentVelocityY) {
		this.enemyMovimentVelocityY = enemyMovimentVelocityY;
	}

	public double getEnemyX() {
		return enemyX;
	}

	public void setEnemyX(double enemyX) {
		this.enemyX = enemyX;
	}

	public double getEnemyY() {
		return enemyY;
	}

	public void setEnemyY(double enemyY) {
		this.enemyY = enemyY;
	}

	public boolean isPodeMovimentar() {
		return podeMovimentar;
	}

	public void setPodeMovimentar(boolean podeMovimentar) {
		this.podeMovimentar = podeMovimentar;
	}
	
}
