package megaman;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;

import org.omg.CORBA.ULongSeqHolder;

import robocode.HitByBulletEvent;

public class SmartAgent {
	double enemyX;
	double enemyY;
	boolean podeMovimentar = true;
	double enemyMovimentVelocityX = 0;
	double enemyMovimentVelocityY = 0;
	
	private final int ANGLE_MOVEMENT = 10;
	private final int NUM_ULTIMAS_ACOES = 10;
	public static List<PositionEscape> positionEscapeList = new ArrayList<PositionEscape>();
	public static LastPosition lastPosition;

	public MovementRobot continuousMovement() {
		MovementRobot continuousMovement = new MovementRobot();
		int fatorX = 1;
		int fatorY = 1;

		if (enemyX > 500) {
			fatorX = -1;
		}
		if (enemyY > 300) {
			fatorY = -1;
		}

		if (enemyMovimentVelocityX < 5 && enemyMovimentVelocityX >= 0) {
			continuousMovement.direita = 0;
		} else if (enemyMovimentVelocityX > 10) {
			continuousMovement.direita = fatorX * 30;
		} else if (enemyMovimentVelocityX > 30) {
			continuousMovement.direita = fatorX * 50;
		}else{
			continuousMovement.frente = fatorX * 70;
		}

		if (enemyMovimentVelocityY < 5 && enemyMovimentVelocityY >= 0) {
			continuousMovement.frente = 0;
		} else if (enemyMovimentVelocityY > 10) {
			continuousMovement.frente = fatorY * 30;
		} else if (enemyMovimentVelocityY > 30) {
			continuousMovement.frente = fatorY * 50;
		}else{
			continuousMovement.frente = fatorY * 70;
		}
		
		return continuousMovement;
	}

	public void updatePosEnemy(double posX, double posY) {
		
		enemyMovimentVelocityX = enemyX - posX;
		enemyMovimentVelocityY = enemyY - posY;

		enemyX = posX;
		enemyY = posY;

	}

	/**
	 * Prepares a nice shot based on distance of the target, bullet's power and enemy's velocity.
	 * 
	 * @param distance
	 * @param power
	 * @return shoot
	 */
	public Shot niceShot(double distance, double energy) {
		if (energy < 20) {
			return new Shot(1, 1);
		}

		if (distance < 180) {
			return new Shot(3, 3);
		} else if (distance < 250) {
			return new Shot(2, 3);
		} else if (distance < 300) {
			return new Shot(1, 2);
		} else if (distance < 550) {
			if (enemyMovimentVelocityX < 5) {
				return new Shot(2, 3);
			}
			return new Shot(2, 1);
		} else if (distance < 700) {
			if (enemyMovimentVelocityX < 5) {
				return new Shot(2, 3);
			}
			return new Shot(1, 1);
		} else if (distance < 900) {
			if (enemyMovimentVelocityX < 5) {
				return new Shot(2, 3);
			}
			return new Shot(1, 1);
		}
		return new Shot(1, 1);
	}

	public double normalRelativeAngle(double angle) {
		if (angle > -180 && angle <= 180) {
			return angle;
		}

		double fixedAngle = angle;
		while (fixedAngle <= -180) {
			fixedAngle += 360;
		}

		while (fixedAngle > 180) {
			fixedAngle -= 360;
		}

		return fixedAngle;
	}

	public double target(double Adv, double dirTanque, double dirMetralhadora) {
		double angleShot = dirTanque + Adv - dirMetralhadora;
		if (!(angleShot > -180 && angleShot <= 180)) {
			while (angleShot <= -180) {
				angleShot += 360;
			}
			while (angleShot > 180) {
				angleShot -= 360;
			}
		}
		return angleShot;
	}

	
	public MovementRobot hit(double anguloBala) throws Exception {

		int angleHit = 0;

		if (anguloBala >= 90 && anguloBala < 180) {
			angleHit = 0;
		} else if (anguloBala >= 0 && anguloBala < 90) {
			angleHit = 1;
		} else if (anguloBala < 0 && anguloBala >= -90) {
			angleHit = 2;
		} else if (anguloBala < -90 && anguloBala >= -180) {
			angleHit = 3;
		}
		
		if (positionEscapeList.isEmpty()) {
			try {
				positionEscapeList = FileController.lerArquivo();
			} catch (FileNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
		if (positionEscapeList.isEmpty()) {
			
			for (int anguloTiro = 0; anguloTiro < 4; anguloTiro++) {
				for(int ladoFuga = 0; ladoFuga < 4; ladoFuga++){
					for (int h = 0; h < 19; h++) {
						int anguloMovimento = h * ANGLE_MOVEMENT;
						PositionEscape posicaoFuga = new PositionEscape();
						
						posicaoFuga.setAnguloFuga(anguloMovimento);
						posicaoFuga.setTempoResistencia(new Double(0));
						posicaoFuga.setPosicaoTiro(anguloTiro);
						posicaoFuga.setPosicaoFuga(ladoFuga);
						positionEscapeList.add(posicaoFuga);
						
					}
				}
			}
			FileController.gravarArquivo(positionEscapeList);
		}
		
		if (lastPosition != null) {
			lastPosition.setTempoProximoTiro(Calendar.getInstance().getTimeInMillis());
			
			for (PositionEscape posicaoFuga : positionEscapeList) {
				if (posicaoFuga.getAnguloFuga() == lastPosition.getAnguloFuga()
						&& posicaoFuga.getPosicaoFuga() == lastPosition.getPosicaoFuga()
						&& posicaoFuga.getPosicaoTiro() == lastPosition.getPosicaoTiro()) {
					Double tempoResistencia = ((((double) (lastPosition.getTempoProximoTiro() - lastPosition.getTempoTiro()) / 1000)) + posicaoFuga.getTempoResistencia()) / 2;
					
					posicaoFuga.setTempoResistencia(tempoResistencia);
					break;
					
				}
			}
		}
	
		return escolheMelhorAngulo(angleHit);

	}

	public MovementRobot escolheMelhorAngulo(int posicaoTiro) {


		PositionEscape melhorPosicaoFuga= new PositionEscape();
		boolean haPosicoesNaoTestadas = false;
		
		if (!positionEscapeList.isEmpty()) {
			for (PositionEscape posicaoFuga : positionEscapeList) {
				if (posicaoFuga.getPosicaoTiro() == posicaoTiro) {
					if (posicaoFuga.getTempoResistencia().doubleValue() == 0) {
						melhorPosicaoFuga = posicaoFuga.clone();	
						haPosicoesNaoTestadas = true;	
						lastPosition = new LastPosition(posicaoFuga);
						lastPosition.setTempoTiro(Calendar.getInstance().getTimeInMillis());
						break;
					}
				}
			}
		}
		
		if (!haPosicoesNaoTestadas) {
			melhorPosicaoFuga = getMaiorResistencia(posicaoTiro);
			lastPosition = new LastPosition(melhorPosicaoFuga);
			lastPosition.setTempoTiro(Calendar.getInstance().getTimeInMillis());
		}
		

		switch (melhorPosicaoFuga.getPosicaoFuga()) {
		case 0:
			return new MovementRobot(100, 0, 0, melhorPosicaoFuga.getAnguloFuga());
		case 1:
			return new MovementRobot(100, 0, melhorPosicaoFuga.getAnguloFuga(), 0);
		case 2:
			return new MovementRobot(0, 100, 0, melhorPosicaoFuga.getAnguloFuga());
		case 3:
			return new MovementRobot(0, 100, melhorPosicaoFuga.getAnguloFuga(), 0);
		default:
			return new MovementRobot(100, 0, 0, 0);
		}

	}
	
	public PositionEscape getMaiorResistencia(int posicaoTiro){
		Random random = new Random();
		PositionEscape melhorPosicao = null;
		for (PositionEscape posicaoFuga : positionEscapeList) {
			if (posicaoFuga.getPosicaoTiro() == posicaoTiro) {
				if (melhorPosicao == null) {
					melhorPosicao = posicaoFuga.clone();
				}
				if (posicaoFuga.getTempoResistencia().doubleValue() > melhorPosicao.getTempoResistencia().doubleValue()) {
					melhorPosicao = posicaoFuga.clone();
					
				}else if (posicaoFuga.getTempoResistencia().doubleValue() ==  melhorPosicao.getTempoResistencia().doubleValue()) {					
					int valor = random.nextInt(2);
					if (valor == 0) {
						melhorPosicao = posicaoFuga.clone();
					}
				}
			}
		}
		
		return melhorPosicao;
		
		
	}

}
